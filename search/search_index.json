{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#introduction","title":"Introduction","text":"<p>welcome to this random from my personal project. currently i working on my several personal project (mostly do for learning).</p>"},{"location":"#db2puml-database-to-plantuml","title":"DB2PUML (database to plantuml)","text":"<p>open tab above db2puml</p> <p></p>"},{"location":"#libopencm3-stm32","title":"Libopencm3 STM32","text":"<p>open tab above embedded</p> <p> </p>"},{"location":"#erpplanner","title":"ErpPlanner","text":"<p>go here</p>"},{"location":"#glfw","title":"GLFW","text":"<p>go here</p>"},{"location":"#sore","title":"SORE","text":"<p>go here</p>"},{"location":"#sudi-split-keyboard","title":"Sudi - Split Keyboard","text":"<p>go here</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"db2puml/","title":"Introduction","text":"DB2PUML <p>Toy Project To Generate Databse Server Entity Diagram </p> <p> </p>"},{"location":"db2puml/#db2puml","title":"DB2PUML","text":"<p>Generate PlantUML Entity Relationship Diagram From Database Tables</p> <p>This command line utility parses the tables in Database server to generate PlantUML syntax to create diagrams of Databse tables and thier foreign key relationships.</p>"},{"location":"db2puml/#prerequisite","title":"Prerequisite","text":"<ul> <li>Dotnet 8 for build</li> <li>Java for running plantuml</li> <li>Graphviz</li> <li>PlantUML.jar (auto downloaded if not found)</li> </ul>"},{"location":"db2puml/#example-usage","title":"Example Usage","text":"<p>after build, change Connection string in <code>setting.json</code>, then you can try to generate svg with  <pre><code>dotnet run -- generate svg \n</code></pre> you can see example svg/puml output in output folder </p>"},{"location":"db2puml/#help-command","title":"Help Command","text":"<pre><code>USAGE:\n    db2puml.dll [OPTIONS] &lt;COMMAND&gt;\n\nEXAMPLES:\n    db2puml.dll list\n    db2puml.dll generate svg --name mysvg\n    db2puml.dll generate svg --name mysvg --output svg_output_folder\n    db2puml.dll generate pdf --name mydiagrampdf\n    db2puml.dll generate pdf --name mydiagrampdf --output myCustomOutputFolder\n\nOPTIONS:\n    -h, --help       Prints help information\n    -v, --version    Prints version information\n\nCOMMANDS:\n    config\n    generate\n</code></pre>"},{"location":"db2puml/#note","title":"Note","text":"<ul> <li>if you use cmd or windows based terminal emoji may not showing up, you can use <code>chcp 65001 &amp; cmd</code> to see emoji (ref: https://conemu.github.io/en/UnicodeSupport.html)</li> <li>this project forked from https://github.com/OceanAirdrop/SqlServerToPlantUML.git</li> </ul>"},{"location":"embedded/","title":"Introduction","text":"Libopencm3 CMake <p>cmake configuration for stm32 libopencm3, with automatic linker script generator</p>"},{"location":"embedded/#introduction","title":"Introduction","text":"<p>cmake configuration for stm32 libopencm3, with automatic linker script generator</p>"},{"location":"embedded/#build-step","title":"Build Step","text":"<p>Prerequisite:</p> <ul> <li>cmake </li> <li>arm-none-eabi-gcc</li> <li>mkdocs (optional  ) </li> <li>make (optional, if you build with gnu-make  ) </li> <li>doxygen (optional, to build libopencm3 documentation )</li> </ul> <p>Almost all prerequisite available in <code>pacman</code>(arch linux), clone this repo and change directory to this folder then... <pre><code>git clone https://github.com/ahsanu123/learnRepo.git\ncd embedded\ncmake -S . -B build\ncd build\nmake\n</code></pre></p> <p>you also can generate documentation by</p> <pre><code>cd build/_deps/libopencm3-src/doc\nmake\n</code></pre>"},{"location":"embedded/#working-principle","title":"Working Principle","text":"<p>to use this script you only need to fill <code>arch</code> and <code>device</code>for your stm32 on main <code>CMakeLists.txt</code>, then let cmake do the job</p> <pre><code># ============================================\n# THIS VALUE MUST BE SET BASED ON\n# STM32 ARCHITECTURE AND\n# DEVICE SERIES\n# ============================================\nset(auto_stm32_arch \"f4\")\nset(auto_stm32_device \"stm32f407vgt6\")\n# ============================================\n</code></pre> <p>then link your project </p> <pre><code># ============================================\n# CHANGE YOUR TARGET BASED ON YOUR PROJECT\n# ============================================\nproject(blink VERSION 0.0.1 LANGUAGES CXX C ASM)\n\n.....\n\nadd_executable(blink src/blink.cpp)\ntarget_link_libraries(blink auto_stm32)\n</code></pre> <p>basic principle for this cmake script. <pre><code>graph TD\n  A(Start) --&gt; B{Detected Arch \\nand Device?};\n  B --&gt;|No| Z\n  B --&gt;|Yes| C{libopencm3 \\ndownloaded?}\n  C --&gt;|No| D[Fetch Content]\n  C --&gt;|Yes| E[build libopencm3]\n  D --&gt; C\n  E --&gt; F[Generate Linker \\nscript based on \\ndevice and arch]\n  F --&gt; G[Compile All Source File]\n  G --&gt; H[Link all Object]\n  H --&gt; I[.elf generated]\n  I --&gt; J\n  J(Stop)\n  Z[Error!!] --&gt; J[Stop]\n</code></pre></p>"},{"location":"embedded/#reference","title":"Reference","text":"<p>most of cmake configuration come from official libopencm3 documentation, cmake documentation and</p> <ul> <li> <p>github.com/plusk01/stm32-libopencm3-cmake-blink: Copied Basic Structure</p> </li> <li> <p>github.com/libopencm3/libopencm3/blob/master/mk/genlink-config.mk : converting this configuration makefiles to cmake function</p> </li> </ul> <p><sub><sup> Sunday 04:28 2024 in the morning, Made with \u2665\ufe0f by AH...</sup></sub></p>"}]}